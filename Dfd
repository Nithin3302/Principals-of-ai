def dfs_recursive(graph, start):
  """
  Performs a DFS traversal on a graph recursively.

  Args:
      graph: A dictionary representing the graph. Keys are nodes, values are lists of neighbors.
      start: The starting node for the traversal.

  Returns:
      A list containing the nodes visited in DFS order.
  """
  visited = set()  # Keeps track of visited nodes

  def dfs_helper(node):
    if node in visited:
      return
    visited.add(node)
    for neighbor in graph[node]:
      dfs_helper(neighbor)

  dfs_helper(start)
  return visited

# Example usage
graph = {
  "A": ["B", "C"],
  "B": ["D", "E"],
  "C": ["F"],
  "D": [],
  "E": ["F"],
  "F": [],
}

starting_node = "A"
dfs_result = dfs_recursive(graph, starting_node)

print(f"DFS traversal starting from {starting_node}: {dfs_result}")
