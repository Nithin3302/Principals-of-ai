def merge(arr, left, mid, right):
  """
  Merges two sorted subarrays into one sorted subarray.

  Args:
      arr: The array to be sorted.
      left: Starting index of the first subarray.
      mid: Middle index of the array (inclusive of left subarray and exclusive of right subarray).
      right: Ending index of the second subarray (exclusive).
  """
  n1 = mid - left + 1  # Size of the left subarray
  n2 = right - mid  # Size of the right subarray

  # Create temporary arrays
  left_arr = [0] * n1
  right_arr = [0] * n2

  # Copy data to temporary arrays
  for i in range(n1):
    left_arr[i] = arr[left + i]
  for j in range(n2):
    right_arr[j] = arr[mid + 1 + j]

  # Merge the temporary arrays back into arr[left..right]
  i = 0  # Index for left subarray
  j = 0  # Index for right subarray
  k = left  # Index for merged subarray
  while i < n1 and j < n2:
    if left_arr[i] <= right_arr[j]:
      arr[k] = left_arr[i]
      i += 1
    else:
      arr[k] = right_arr[j]
      j += 1
    k += 1

  # Copy the remaining elements of left_arr, if there are any
  while i < n1:
    arr[k] = left_arr[i]
    i += 1
    k += 1

  # Copy the remaining elements of right_arr, if there are any
  while j < n2:
    arr[k] = right_arr[j]
    j += 1
    k += 1


def merge_sort(arr, left, right):
  """
  Sorts an array using merge sort algorithm.

  Args:
      arr: The array to be sorted.
      left: Starting index of the subarray to be sorted.
      right: Ending index of the subarray to be sorted (inclusive).
  """
  if left < right:
    # Find the middle point of the subarray
    mid = (left + right) // 2

    # Sort first and second halves
    merge_sort(arr, left, mid)
    merge_sort(arr, mid + 1, right)

    # Merge the sorted halves
    merge(arr, left, mid, right)


# Example usage
arr = [6, 5, 3, 1, 8, 7, 2, 4]
merge_sort(arr, 0, len(arr) - 1)

print("Sorted array:", arr)
